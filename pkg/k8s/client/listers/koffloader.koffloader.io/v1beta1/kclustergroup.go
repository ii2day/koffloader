// Copyright 2024 Authors of koffloader-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/koffloader-io/koffloader/pkg/k8s/apis/koffloader.koffloader.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KClusterGroupLister helps list KClusterGroups.
// All objects returned here must be treated as read-only.
type KClusterGroupLister interface {
	// List lists all KClusterGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KClusterGroup, err error)
	// Get retrieves the KClusterGroup from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.KClusterGroup, error)
	KClusterGroupListerExpansion
}

// kClusterGroupLister implements the KClusterGroupLister interface.
type kClusterGroupLister struct {
	indexer cache.Indexer
}

// NewKClusterGroupLister returns a new KClusterGroupLister.
func NewKClusterGroupLister(indexer cache.Indexer) KClusterGroupLister {
	return &kClusterGroupLister{indexer: indexer}
}

// List lists all KClusterGroups in the indexer.
func (s *kClusterGroupLister) List(selector labels.Selector) (ret []*v1beta1.KClusterGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KClusterGroup))
	})
	return ret, err
}

// Get retrieves the KClusterGroup from the index for a given name.
func (s *kClusterGroupLister) Get(name string) (*v1beta1.KClusterGroup, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kclustergroup"), name)
	}
	return obj.(*v1beta1.KClusterGroup), nil
}
